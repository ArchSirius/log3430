/**
 * 
 */

/**
 * @author jennikhoury
 *
 */

import java.util.*;
public class ListeChainee {
	
	public ListeChainee(String operateur,ArrayList<Integer> val1,ArrayList<Integer> val2)
	{
		
	}
	
	public ListeChainee()
	{
		val1_ = new ArrayList<Integer>();
		val2_ = new ArrayList<Integer>();
		
		val1_.add(2);
		val1_.add(23);
		val1_.add(15);
		val1_.add(5);
		
		val2_.add(2);
		val2_.add(56);
		val2_.add(12);
		val2_.add(3);
		val2_.add(5);	
		
		size1_ = val1_.size();
		size2_ = val2_.size();
	}
	
	ArrayList<Integer> computeResult(){
		ArrayList<Integer> result = new ArrayList<Integer>();
		
		
		
		return result;
	}
	
	
	ArrayList<Integer> computeUnion(){
		ArrayList<Integer> result = new ArrayList<Integer>();
		Integer currentInt = 0;
		for (int i = 0; i < size1_; i++){
			currentInt = val1_.get(i);
			if (!result.contains(currentInt)){
				result.add(currentInt);
			}
		}
		for (int j = 0; j < size2_; j++){
			currentInt = val2_.get(j);
			if (!result.contains(currentInt)){
				result.add(currentInt);
			}
		}
		return result;
	}
	
	ArrayList<Integer> computeIntersection(){
		ArrayList<Integer> result = new ArrayList<Integer>();
		Integer currentInt = 0;
		if (size1_ > size2_){
			for (int i = 0; i < size1_; i++) {
				currentInt = val1_.get(i);
				if (val2_.contains(currentInt) && !result.contains(currentInt)){
					result.add(currentInt);
				}
			}
		} else {
			for (int j = 0; j < size2_; j++) {
				currentInt = val2_.get(j);
				if (val1_.contains(currentInt) && !result.contains(currentInt)){
					result.add(currentInt);
				}
			}
		}
		return result;
	}
	
	ArrayList<Integer> computeDifference(){
		ArrayList<Integer> result = new ArrayList<Integer>();
		Integer currentInt = 0;
		for (int i = 0; i < size1_; i++){
			currentInt = val1_.get(i);
			if (!val2_.contains(currentInt) && !result.contains(currentInt)){
				result.add(currentInt);
			}
		}
		return result;
	}
	
	ArrayList<Integer> computeSymetricDifference(){
		ArrayList<Integer> result = new ArrayList<Integer>();
		ArrayList<Integer> intersection = computeIntersection();
		Integer currentInt = 0;
		for (int i = 0; i < size1_; i++){
			currentInt = val1_.get(i);
			if (!intersection.contains(currentInt) && !result.contains(currentInt)){
				result.add(currentInt);
			}
		}
		for (int i = 0; i < size2_; i++){
			currentInt = val2_.get(i);
			if (!intersection.contains(currentInt) && !result.contains(currentInt)){
				result.add(currentInt);
			}
		}
		return result;
	}
	
	ArrayList<Integer> isSubset(){
		ArrayList<Integer> result = new ArrayList<Integer>();
		Integer currentInt = 0;
		Integer isSubset = 1;
		for (int i = 0; i < size1_; i++){
			currentInt = val1_.get(i);
			if (!val2_.contains(currentInt)){
				isSubset = 0;
			}
		}
		result.add(isSubset);
		return result;
	}
	
	ArrayList<Integer> isSuperset(){
		ArrayList<Integer> result = new ArrayList<Integer>();
		Integer currentInt = 0;
		Integer isSuperset = 1;
		for (int i = 0; i < size2_; i++){
			currentInt = val2_.get(i);
			if (!val1_.contains(currentInt)){
				isSuperset = 0;
			}
		}
		result.add(isSuperset);
		return result;
	}
	
	private ArrayList<Integer> val1_;
	private ArrayList<Integer> val2_;
	Integer size1_;
	Integer size2_;
	private String operateur_;
	

}
